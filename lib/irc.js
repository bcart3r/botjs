// Generated by CoffeeScript 1.3.3
(function() {
  var Irc, JoinMatcher, LineMatcher, net,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  net = require('net');

  JoinMatcher = /:(.+)!.+ (.+) (#.+)/;

  LineMatcher = /:(.+)!.+ (.+) (#.+) :(.+)/;

  Irc = (function() {

    function Irc(args) {
      this.dataHandler = __bind(this.dataHandler, this);

      this.connHandler = __bind(this.connHandler, this);

      this.write = __bind(this.write, this);

      this.connect = __bind(this.connect, this);
      this.nick = args.nick;
      this.user = args.user;
      this.channels = args.channels;
      this.plugins = args.plugins;
    }

    Irc.prototype.connect = function(host, port) {
      this.sock = net.connect({
        host: host,
        port: port
      });
      this.sock.on('connect', this.connHandler);
      return this.sock.on('data', this.dataHandler);
    };

    Irc.prototype.write = function(msg) {
      return this.sock.write("" + msg + "\r\n");
    };

    Irc.prototype.connHandler = function() {
      var chan, _i, _len, _ref, _results;
      this.write("NICK " + this.nick);
      this.write("USER " + this.nick + " 0 * :" + this.user);
      _ref = this.channels;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        chan = _ref[_i];
        _results.push(this.write("JOIN " + chan));
      }
      return _results;
    };

    Irc.prototype.dataHandler = function(data) {
      var ircMap, line, lines, matches, plugin, _i, _len, _results;
      lines = data.toString().split('\n');
      _results = [];
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        console.log(line);
        if (line.search("PING") !== -1) {
          this.write("PONG " + (line.match(':.*')[0]));
        }
        _results.push((function() {
          var _j, _len1, _ref, _results1;
          _ref = this.plugins;
          _results1 = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            plugin = _ref[_j];
            matches = '';
            switch (plugin.matcher) {
              case 'JOIN':
                matches = JoinMatcher.exec(line);
                break;
              default:
                matches = LineMatcher.exec(line);
            }
            if (line.match(plugin.matcher)) {
              ircMap = {
                user: matches[1],
                type: matches[2],
                chan: matches[3],
                msg: matches[4]
              };
              _results1.push(plugin.callback(this, ircMap));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return Irc;

  })();

  exports.Irc = Irc;

}).call(this);
